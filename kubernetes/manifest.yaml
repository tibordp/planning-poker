apiVersion: v1
kind: Namespace
metadata:
  name: planning-poker
---
apiVersion: v1
kind: Service
metadata:
  name: planning-poker
  namespace: planning-poker
spec:
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
  selector:
    app: planning-poker
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: planning-poker
  namespace: planning-poker
spec:
  selector:
    matchLabels:
      app: planning-poker
  replicas: 1
  template:
    metadata:
      labels:
        app: planning-poker
    spec:
      containers:
        - name: planning-poker
          image: tibordp/planning-poker:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
          env:
            # Planning Poker uses Websockets by default, but long polling is supported
            # for better experience with reverse proxies that do not pass through Websockets
            # very well. It also uses rather aggressive heartbeat intervals, to detect
            # client disconnections and reconnect sooner. This helps user experience, but
            # can increase resource utilization, so it is adjustable through environment variables.
            - name: USE_LONG_POLLING
              value: "false"
            - name: PP_HEARTBEAT_INTERVAL
              value: "5000"
            - name: PP_HEARTBEAT_TIMEOUT
              value: "10000"
            # How long to persist the session data on the server after the last client
            # disconnects.
            - name: PP_SESSION_TTL
              value: "60000"
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 2
            periodSeconds: 2
            successThreshold: 1
            timeoutSeconds: 1
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: planning-poker
  namespace: planning-poker
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.com/health-checks: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - planning-poker.example
      secretName: planning-poker-tls
  rules:
    - host: planning-poker.example
      http:
        paths:
          - path: /
            backend:
              serviceName: planning-poker
              servicePort: 80
